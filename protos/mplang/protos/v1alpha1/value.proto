// Copyright 2025 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package mplang.protos.v1alpha1;

// Lightweight attribute proto used solely for ValueProto runtime metadata.

message ValueAttrProto {
  enum AttrType {
    UNDEFINED = 0;
    FLOAT = 1;
    INT = 2;
    STRING = 3;
    BOOL = 4;
    BYTES = 5;
    FLOATS = 6;
    INTS = 7;
    STRINGS = 8;
    // Represents an explicitly empty attribute value (e.g., empty list)
    EMPTY = 9;
  }

  AttrType type = 1;
  float f = 2;
  int64 i = 3;
  string s = 4;
  bool b = 5;
  bytes raw_bytes = 6;
  repeated float floats = 7;
  repeated int64 ints = 8;
  repeated string strs = 9;
}

// Generic envelope for kernel-level transferable values.
//
// DESIGN PRINCIPLES
// * Small, stable schema: only descriptors needed for dynamic dispatch.
// * Payload is opaque to the envelope; per-kind versioning lives in
// value_version.
// * Backward-compatible evolution: only append new optional fields.
//
// Versioning Guidelines:
// - value_version: per-kind semantic payload version (maintained by KernelValue
// subclass).
// - Adding fields: assign new unique field numbers; never reuse old numbers.
// - Removing fields: reserve the field number & (optionally) name.
message ValueProto {
  // Globally unique identifier for Value subclass, e.g. "mplang.ndarray".
  string kind = 1;
  // Per-kind payload schema version (>=1).
  uint32 value_version = 2;
  // Primary data payload bytes (layout defined by each Value subclass).
  bytes payload = 3;

  // Additional runtime metadata required to recreate the Value instance.
  map<string, ValueAttrProto> runtime_attrs = 4;
}
