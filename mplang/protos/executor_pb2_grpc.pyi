"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
from . import executor_pb2
import google.protobuf.empty_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class ExecutorServiceStub:
    """Service definition for managing symbols."""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    CreateSymbol: grpc.UnaryUnaryMultiCallable[
        executor_pb2.CreateSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Creates a new symbol."""

    GetSymbol: grpc.UnaryUnaryMultiCallable[
        executor_pb2.GetSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Retrieves a symbol by its resource name."""

    ListSymbols: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ListSymbolsRequest,
        executor_pb2.ListSymbolsResponse,
    ]
    """Lists symbols under a specified parent."""

    UpdateSymbol: grpc.UnaryUnaryMultiCallable[
        executor_pb2.UpdateSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Updates an existing symbol."""

    DeleteSymbol: grpc.UnaryUnaryMultiCallable[
        executor_pb2.DeleteSymbolRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a symbol by its resource name."""

    CreateSession: grpc.UnaryUnaryMultiCallable[
        executor_pb2.CreateSessionRequest,
        executor_pb2.Session,
    ]
    """Methods for managing Session"""

    GetSession: grpc.UnaryUnaryMultiCallable[
        executor_pb2.GetSessionRequest,
        executor_pb2.Session,
    ]

    ListSessions: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ListSessionsRequest,
        executor_pb2.ListSessionsResponse,
    ]

    DeleteSession: grpc.UnaryUnaryMultiCallable[
        executor_pb2.DeleteSessionRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    CreateExecution: grpc.UnaryUnaryMultiCallable[
        executor_pb2.CreateExecutionRequest,
        executor_pb2.Execution,
    ]
    """Methods for managing Execution"""

    GetExecution: grpc.UnaryUnaryMultiCallable[
        executor_pb2.GetExecutionRequest,
        executor_pb2.Execution,
    ]

    ListExecutions: grpc.UnaryUnaryMultiCallable[
        executor_pb2.ListExecutionsRequest,
        executor_pb2.ListExecutionsResponse,
    ]

    DeleteExecution: grpc.UnaryUnaryMultiCallable[
        executor_pb2.DeleteExecutionRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """No UpdateExecution"""

    CommXchg: grpc.UnaryUnaryMultiCallable[
        executor_pb2.CommXchgRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Methods for inter-party communication"""

class ExecutorServiceAsyncStub:
    """Service definition for managing symbols."""

    CreateSymbol: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.CreateSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Creates a new symbol."""

    GetSymbol: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.GetSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Retrieves a symbol by its resource name."""

    ListSymbols: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ListSymbolsRequest,
        executor_pb2.ListSymbolsResponse,
    ]
    """Lists symbols under a specified parent."""

    UpdateSymbol: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.UpdateSymbolRequest,
        executor_pb2.Symbol,
    ]
    """Updates an existing symbol."""

    DeleteSymbol: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.DeleteSymbolRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Deletes a symbol by its resource name."""

    CreateSession: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.CreateSessionRequest,
        executor_pb2.Session,
    ]
    """Methods for managing Session"""

    GetSession: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.GetSessionRequest,
        executor_pb2.Session,
    ]

    ListSessions: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ListSessionsRequest,
        executor_pb2.ListSessionsResponse,
    ]

    DeleteSession: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.DeleteSessionRequest,
        google.protobuf.empty_pb2.Empty,
    ]

    CreateExecution: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.CreateExecutionRequest,
        executor_pb2.Execution,
    ]
    """Methods for managing Execution"""

    GetExecution: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.GetExecutionRequest,
        executor_pb2.Execution,
    ]

    ListExecutions: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.ListExecutionsRequest,
        executor_pb2.ListExecutionsResponse,
    ]

    DeleteExecution: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.DeleteExecutionRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """No UpdateExecution"""

    CommXchg: grpc.aio.UnaryUnaryMultiCallable[
        executor_pb2.CommXchgRequest,
        google.protobuf.empty_pb2.Empty,
    ]
    """Methods for inter-party communication"""

class ExecutorServiceServicer(metaclass=abc.ABCMeta):
    """Service definition for managing symbols."""

    @abc.abstractmethod
    def CreateSymbol(
        self,
        request: executor_pb2.CreateSymbolRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Symbol, collections.abc.Awaitable[executor_pb2.Symbol]]:
        """Creates a new symbol."""

    @abc.abstractmethod
    def GetSymbol(
        self,
        request: executor_pb2.GetSymbolRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Symbol, collections.abc.Awaitable[executor_pb2.Symbol]]:
        """Retrieves a symbol by its resource name."""

    @abc.abstractmethod
    def ListSymbols(
        self,
        request: executor_pb2.ListSymbolsRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ListSymbolsResponse, collections.abc.Awaitable[executor_pb2.ListSymbolsResponse]]:
        """Lists symbols under a specified parent."""

    @abc.abstractmethod
    def UpdateSymbol(
        self,
        request: executor_pb2.UpdateSymbolRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Symbol, collections.abc.Awaitable[executor_pb2.Symbol]]:
        """Updates an existing symbol."""

    @abc.abstractmethod
    def DeleteSymbol(
        self,
        request: executor_pb2.DeleteSymbolRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Deletes a symbol by its resource name."""

    @abc.abstractmethod
    def CreateSession(
        self,
        request: executor_pb2.CreateSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Session, collections.abc.Awaitable[executor_pb2.Session]]:
        """Methods for managing Session"""

    @abc.abstractmethod
    def GetSession(
        self,
        request: executor_pb2.GetSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Session, collections.abc.Awaitable[executor_pb2.Session]]: ...

    @abc.abstractmethod
    def ListSessions(
        self,
        request: executor_pb2.ListSessionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ListSessionsResponse, collections.abc.Awaitable[executor_pb2.ListSessionsResponse]]: ...

    @abc.abstractmethod
    def DeleteSession(
        self,
        request: executor_pb2.DeleteSessionRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]: ...

    @abc.abstractmethod
    def CreateExecution(
        self,
        request: executor_pb2.CreateExecutionRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Execution, collections.abc.Awaitable[executor_pb2.Execution]]:
        """Methods for managing Execution"""

    @abc.abstractmethod
    def GetExecution(
        self,
        request: executor_pb2.GetExecutionRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.Execution, collections.abc.Awaitable[executor_pb2.Execution]]: ...

    @abc.abstractmethod
    def ListExecutions(
        self,
        request: executor_pb2.ListExecutionsRequest,
        context: _ServicerContext,
    ) -> typing.Union[executor_pb2.ListExecutionsResponse, collections.abc.Awaitable[executor_pb2.ListExecutionsResponse]]: ...

    @abc.abstractmethod
    def DeleteExecution(
        self,
        request: executor_pb2.DeleteExecutionRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """No UpdateExecution"""

    @abc.abstractmethod
    def CommXchg(
        self,
        request: executor_pb2.CommXchgRequest,
        context: _ServicerContext,
    ) -> typing.Union[google.protobuf.empty_pb2.Empty, collections.abc.Awaitable[google.protobuf.empty_pb2.Empty]]:
        """Methods for inter-party communication"""

def add_ExecutorServiceServicer_to_server(servicer: ExecutorServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
