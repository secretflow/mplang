name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Create protobuf output directory
      run: mkdir -p mplang/protos
    
    - name: Build protobuf files
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh
      shell: bash
      if: matrix.os != 'windows-latest'
    
    - name: Build protobuf files (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m grpc_tools.protoc -I"protos" --python_out="mplang/protos" --mypy_out="mplang/protos" --grpc_python_out="mplang/protos" --mypy_grpc_out="mplang/protos" "protos/executor.proto"
        python -m grpc_tools.protoc -I"protos" --python_out="mplang/protos" --mypy_out="mplang/protos" "protos/mpir.proto"
    
    - name: Lint with ruff
      run: |
        ruff check .
        ruff format --check .
    
    - name: Type check with mypy
      run: |
        mypy mplang/
    
    - name: Test with pytest
      run: |
        pytest tests/ --cov=mplang --cov-report=xml --cov-report=term-missing -v
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  build:
    name: Build package
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install grpcio-tools
    
    - name: Build protobuf files
      run: |
        chmod +x scripts/build.sh
        ./scripts/build.sh
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/