# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import tee_pb2 as tee__pb2


class TEEMgrServiceStub(object):
    """Service definition for TEE attestation
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Init = channel.unary_unary(
                '/secretflow.TEEMgrService/Init',
                request_serializer=tee__pb2.InitRequest.SerializeToString,
                response_deserializer=tee__pb2.InitResponse.FromString,
                )
        self.GetTEEReport = channel.unary_unary(
                '/secretflow.TEEMgrService/GetTEEReport',
                request_serializer=tee__pb2.GetTEEReportRequest.SerializeToString,
                response_deserializer=tee__pb2.GetTEEReportResponse.FromString,
                )


class TEEMgrServiceServicer(object):
    """Service definition for TEE attestation
    """

    def Init(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTEEReport(self, request, context):
        """Get TEE attestation report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TEEMgrServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Init': grpc.unary_unary_rpc_method_handler(
                    servicer.Init,
                    request_deserializer=tee__pb2.InitRequest.FromString,
                    response_serializer=tee__pb2.InitResponse.SerializeToString,
            ),
            'GetTEEReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTEEReport,
                    request_deserializer=tee__pb2.GetTEEReportRequest.FromString,
                    response_serializer=tee__pb2.GetTEEReportResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'secretflow.TEEMgrService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TEEMgrService(object):
    """Service definition for TEE attestation
    """

    @staticmethod
    def Init(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflow.TEEMgrService/Init',
            tee__pb2.InitRequest.SerializeToString,
            tee__pb2.InitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTEEReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/secretflow.TEEMgrService/GetTEEReport',
            tee__pb2.GetTEEReportRequest.SerializeToString,
            tee__pb2.GetTEEReportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
