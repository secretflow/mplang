// Copyright 2025 Ant Group Co., Ltd.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package secretflow;

import "google/api/annotations.proto";
import "google/api/resource.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/any.proto";

// Service definition for managing symbols.
service ExecutorService {
  // Creates a new symbol.
  rpc CreateSymbol(CreateSymbolRequest) returns (Symbol) {
    option (google.api.http) = {
      post: "/v1/symbols"
      body: "symbol"
    };
  }

  // Retrieves a symbol by its resource name.
  rpc GetSymbol(GetSymbolRequest) returns (Symbol) {
    option (google.api.http) = {
      get: "/v1/{name=symbols/*}"
      additional_bindings: { get: "/v1/{name=sessions/*/symbols/*}" }
      additional_bindings: {
        get: "/v1/{name=sessions/*/executions/*/symbols/*}"
      }
    };
  }

  // Lists symbols under a specified parent.
  rpc ListSymbols(ListSymbolsRequest) returns (ListSymbolsResponse) {
    option (google.api.http) = {
      get: "/v1/symbols"
      additional_bindings: { get: "/v1/{parent=sessions/*}/symbols" }
      additional_bindings: {
        get: "/v1/{parent=sessions/*/executions/*}/symbols"
      }
    };
  }

  // Updates an existing symbol.
  rpc UpdateSymbol(UpdateSymbolRequest) returns (Symbol) {
    option (google.api.http) = {
      patch: "/v1/{symbol.name=symbols/*}"
      body: "symbol"
      additional_bindings: {
        patch: "/v1/{symbol.name=sessions/*/symbols/*}"
        body: "symbol"
      }
      additional_bindings: {
        patch: "/v1/{symbol.name=sessions/*/executions/*/symbols/*}"
        body: "symbol"
      }
    };
  }

  // Deletes a symbol by its resource name.
  rpc DeleteSymbol(DeleteSymbolRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=symbols/*}"
      additional_bindings: { delete: "/v1/{name=sessions/*/symbols/*}" }
      additional_bindings: {
        delete: "/v1/{name=sessions/*/executions/*/symbols/*}"
      }
    };
  }

  // Methods for managing Session
  rpc CreateSession(CreateSessionRequest) returns (Session) {
    option (google.api.http) = {
      post: "/v1/sessions"
      body: "session"
    };
  }

  rpc GetSession(GetSessionRequest) returns (Session) {
    option (google.api.http) = {
      get: "/v1/{name=sessions/*}"
    };
  }

  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse) {
    option (google.api.http) = {
      get: "/v1/sessions"
    };
  }

  rpc DeleteSession(DeleteSessionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=sessions/*}"
    };
  }

  // Methods for managing Execution
  rpc CreateExecution(CreateExecutionRequest) returns (Execution) {
    option (google.api.http) = {
      post: "/v1/{parent=sessions/*}/executions"
      body: "execution"
    };
  }

  rpc GetExecution(GetExecutionRequest) returns (Execution) {
    option (google.api.http) = {
      get: "/v1/{name=sessions/*/executions/*}"
    };
  }

  rpc ListExecutions(ListExecutionsRequest) returns (ListExecutionsResponse) {
    option (google.api.http) = {
      get: "/v1/{parent=sessions/*}/executions"
    };
  }

  // No UpdateExecution

  rpc DeleteExecution(DeleteExecutionRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=sessions/*/executions/*}"
    };
  }

  // Methods for inter-party communication
  rpc CommXchg(CommXchgRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/{name=sessions/*/executions/*/msgs/*/frm/*}"
      body: "data"
    };
  }
}

message CommXchgRequest {
  // The resource name of the message to send.
  // "sessions/{session_id}/executions/{execution_id}/msgs/{msg_id}/frm/{rank}".
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The message to send.
  bytes data = 2 [(google.api.field_behavior) = REQUIRED];
}

// Enum defining the possible states of an execution operation.
enum ExecutionState {
  // Default unspecified state.
  UNSPECIFIED = 0;

  // The operation is currently running.
  RUNNING = 1;

  // The operation completed successfully.
  SUCCEEDED = 2;

  // The operation failed with an error.
  FAILED = 3;

  // The operation was cancelled.
  CANCELLED = 4;
}

// Represents a computation session.
message Session {
  option (google.api.resource) = {
    type: "mplang/Session"
    pattern: "sessions/{session}"
  };

  // The resource name of the session. Format: "sessions/{session_id}".
  // When used in CreateSessionRequest, name is session_id.
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Map of all participant addresses involved in this session.
  map<string, string> party_addrs = 2;

  // Additional metadata for the session.
  map<string, string> metadata = 3;

  // Timestamp when the session was created.
  google.protobuf.Timestamp create_time = 4
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Timestamp when the session was last updated.
  google.protobuf.Timestamp update_time = 5
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Represents an execution operation within a session.
message Execution {
  option (google.api.resource) = {
    type: "mplang/Execution"
    pattern: "sessions/{session}/executions/{execution}"
  };

  // The resource name of the execution. Format:
  // "sessions/{session_id}/executions/{execution_id}".
  // When used in CreateExecutionRequest, name is execution_id.
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // The program binary to execute.
  bytes program = 2;

  // List of input symbol resource names. Format examples:
  // - "symbols/{symbol_id}" (global)
  // - "sessions/{session_id}/executions/{execution_id}/symbols/{symbol_id}"
  repeated string input_names = 3;

  // List of output symbol resource names. Format examples:
  // - "sessions/{session_id}/executions/{execution_id}/symbols/{symbol_id}"
  repeated string output_names = 4;

  // Configuration for execution runtime
  google.protobuf.Any rt_config = 5;

  // Attributes for the execution, such as environment variables or
  // additional parameters.
  map<string, google.protobuf.Value> attrs = 6;

  // Current state of the execution.
  ExecutionState state = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Error message if the execution failed or was cancelled.
  string error = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Timestamp when the execution was created.
  google.protobuf.Timestamp create_time = 9
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Timestamp when the execution started.
  google.protobuf.Timestamp start_time = 10
      [(google.api.field_behavior) = OUTPUT_ONLY];

  // Timestamp when the execution completed.
  google.protobuf.Timestamp end_time = 11
      [(google.api.field_behavior) = OUTPUT_ONLY];
}

// Represents a symbol in a symbol table.
message Symbol {
  option (google.api.resource) = {
    type: "mplang/Symbol"
    pattern: "symbols/{symbol}"
    pattern: "sessions/{session}/executions/{execution}/symbols/{symbol}"
    singular: "symbol"
    plural: "symbols"
  };

  // The resource name of the symbol, when used in CreateSymbolRequest, name is
  // symbol_id
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  // Symbol data.
  bytes data = 2;

  // Type information of the symbol.
  string type = 3;
}

// Request message for creating a symbol.
message CreateSymbolRequest {
  // The parent resource where this symbol will be created.
  // Only "" is supported for now.
  string parent = 1;

  // The symbol to create.
  Symbol symbol = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for retrieving a symbol.
message GetSymbolRequest {
  // The resource name of the symbol to retrieve.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for listing symbols.
message ListSymbolsRequest {
  // The parent resource whose symbols are to be listed.
  // - For global symbols, use "" or "symbols".
  // - For session-level symbols, use "sessions/{session_id}".
  // - For execution-level symbols, use
  // "sessions/{session_id}/executions/{execution_id}".
  string parent = 1;

  // The maximum number of symbols to return.
  int32 page_size = 2;

  // The token to retrieve the next page of results.
  string page_token = 3;
}

// Response message for listing symbols.
message ListSymbolsResponse {
  // The list of symbols.
  repeated Symbol symbols = 1;

  // The token to retrieve the next page of results.
  string next_page_token = 2;
}

// Request message for updating a symbol.
message UpdateSymbolRequest {
  // The symbol to update.
  // The `name` field must be set to the full resource name of the symbol.
  Symbol symbol = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2
      [(google.api.field_behavior) = REQUIRED];
}

// Request message for deleting a symbol.
message DeleteSymbolRequest {
  // The resource name of the symbol to delete.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for creating a session.
message CreateSessionRequest {
  string parent = 1;

  Session session = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for retrieving a session.
message GetSessionRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for listing sessions.
message ListSessionsRequest {
  int32 page_size = 1;
  string page_token = 2;
}

// Response message for listing sessions.
message ListSessionsResponse {
  repeated Session sessions = 1;
  string next_page_token = 2;
}

// Request message for deleting a session.
message DeleteSessionRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for creating an execution.
message CreateExecutionRequest {
  string parent = 1;
  Execution execution = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for retrieving an execution.
message GetExecutionRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// Request message for listing executions.
message ListExecutionsRequest {
  string parent = 1;
  int32 page_size = 2;
  string page_token = 3;
}

// Response message for listing executions.
message ListExecutionsResponse {
  repeated Execution executions = 1;
  string next_page_token = 2;
}

// Request message for deleting an execution.
message DeleteExecutionRequest {
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}
