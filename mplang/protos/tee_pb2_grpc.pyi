"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2025 Ant Group Co., Ltd.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import abc
import collections.abc
import grpc
import grpc.aio
from . import tee_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class TEEMgrServiceStub:
    """Service definition for TEE attestation"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Init: grpc.UnaryUnaryMultiCallable[
        tee_pb2.InitRequest,
        tee_pb2.InitResponse,
    ]

    GetTEEReport: grpc.UnaryUnaryMultiCallable[
        tee_pb2.GetTEEReportRequest,
        tee_pb2.GetTEEReportResponse,
    ]
    """Get TEE attestation report"""

class TEEMgrServiceAsyncStub:
    """Service definition for TEE attestation"""

    Init: grpc.aio.UnaryUnaryMultiCallable[
        tee_pb2.InitRequest,
        tee_pb2.InitResponse,
    ]

    GetTEEReport: grpc.aio.UnaryUnaryMultiCallable[
        tee_pb2.GetTEEReportRequest,
        tee_pb2.GetTEEReportResponse,
    ]
    """Get TEE attestation report"""

class TEEMgrServiceServicer(metaclass=abc.ABCMeta):
    """Service definition for TEE attestation"""

    @abc.abstractmethod
    def Init(
        self,
        request: tee_pb2.InitRequest,
        context: _ServicerContext,
    ) -> typing.Union[tee_pb2.InitResponse, collections.abc.Awaitable[tee_pb2.InitResponse]]: ...

    @abc.abstractmethod
    def GetTEEReport(
        self,
        request: tee_pb2.GetTEEReportRequest,
        context: _ServicerContext,
    ) -> typing.Union[tee_pb2.GetTEEReportResponse, collections.abc.Awaitable[tee_pb2.GetTEEReportResponse]]:
        """Get TEE attestation report"""

def add_TEEMgrServiceServicer_to_server(servicer: TEEMgrServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
